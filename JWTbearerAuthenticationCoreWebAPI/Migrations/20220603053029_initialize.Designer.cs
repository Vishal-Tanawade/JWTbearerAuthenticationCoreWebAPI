// <auto-generated />
using System;
using JWTbearerAuthenticationCoreWebAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JWTbearerAuthenticationCoreWebAPI.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20220603053029_initialize")]
    partial class initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JWTbearerAuthenticationCoreWebAPI.Models.SecurityQuestion", b =>
                {
                    b.Property<int>("SqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SqId");

                    b.ToTable("SecurityQuestions");

                    b.HasData(
                        new
                        {
                            SqId = 1,
                            Question = "What is your mother's maiden name?"
                        },
                        new
                        {
                            SqId = 2,
                            Question = "What is the name of your first pet?"
                        },
                        new
                        {
                            SqId = 3,
                            Question = "What was your first car?"
                        },
                        new
                        {
                            SqId = 4,
                            Question = "What elementary school did you attend?"
                        },
                        new
                        {
                            SqId = 5,
                            Question = "What is the name of the town where you were born?"
                        },
                        new
                        {
                            SqId = 6,
                            Question = "When you were young, what did you want to be when you grew up?"
                        },
                        new
                        {
                            SqId = 7,
                            Question = "Who was your childhood hero?"
                        },
                        new
                        {
                            SqId = 8,
                            Question = "Where was your best family vacation as a kid?"
                        });
                });

            modelBuilder.Entity("JWTbearerAuthenticationCoreWebAPI.Models.UserDetail", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SqAns")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SqId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("SqId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("UserDetails");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Dob = new DateTime(2022, 6, 3, 11, 0, 29, 359, DateTimeKind.Local).AddTicks(9505),
                            Email = "aron.hawkins@aol.com",
                            FName = "Aaron",
                            Gender = "Male",
                            LName = "Hawkins",
                            Password = "Arron@123",
                            PhoneNumber = "5123456789",
                            SqAns = "Father",
                            SqId = 7,
                            UserName = "Aaronhawkins",
                            UserTypeId = 1
                        });
                });

            modelBuilder.Entity("JWTbearerAuthenticationCoreWebAPI.Models.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserTypeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            UserTypeId = 1,
                            UserTypeName = "Admin"
                        },
                        new
                        {
                            UserTypeId = 2,
                            UserTypeName = "Customer"
                        },
                        new
                        {
                            UserTypeId = 3,
                            UserTypeName = "Vendor"
                        });
                });

            modelBuilder.Entity("JWTbearerAuthenticationCoreWebAPI.Models.UserDetail", b =>
                {
                    b.HasOne("JWTbearerAuthenticationCoreWebAPI.Models.SecurityQuestion", "SecurityQuestion")
                        .WithMany("UserDetails")
                        .HasForeignKey("SqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JWTbearerAuthenticationCoreWebAPI.Models.UserType", "UserType")
                        .WithMany("UserDetails")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityQuestion");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("JWTbearerAuthenticationCoreWebAPI.Models.SecurityQuestion", b =>
                {
                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("JWTbearerAuthenticationCoreWebAPI.Models.UserType", b =>
                {
                    b.Navigation("UserDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
